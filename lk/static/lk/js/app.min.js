/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

// // Import jQuery module (npm i jquery)
// import $ from 'jquery'
// window.jQuery = $
// window.$ = $
// // Import vendor jQuery plugin example (not module)
// require('~/app/libs/calendar.js');
// import readXlsxFile from 'read-excel-file'
document.addEventListener('DOMContentLoaded', function () {
  setTimeout(function () {
    document.querySelector('.preloader').classList.add("preloader-remove");
  });

  var changeData = __webpack_require__(1),
      dropDown = __webpack_require__(2),
      modals = __webpack_require__(3),
      search = __webpack_require__(4),
      tabs = __webpack_require__(5),
      addFile = __webpack_require__(6); // changeForms();


  changeData();
  dropDown();
  modals();
  search();
  tabs();
  addFile();
  var changeFotoInput = document.querySelector('#personal-foto'),
      changeFotoImg = document.querySelector('#personal-foto-img'),
      clearPersonImg = document.querySelector('.clear-image');
  var changeFotoImgSrc;

  if (changeFotoImg.src != "".concat(window.location.protocol, "//").concat(window.location.host, "/undefined") && changeFotoImg.src != "".concat(window.location.protocol, "//").concat(window.location.host, "/null")) {
    changeFotoImgSrc = changeFotoImg.src;
  } else {
    changeFotoImg.src = "".concat(window.location.protocol, "//").concat(window.location.host, "/images/dist/personal-photo.jpg");
  } // Загрузка превью


  changeFotoInput.onchange = function (evt) {
    var _changeFotoInput$file = _slicedToArray(changeFotoInput.files, 1),
        file = _changeFotoInput$file[0];

    if (file) {
      changeFotoImg.src = URL.createObjectURL(file);
      clearPersonImg.classList.add('show');
    }
  }; // Удаление фото и установка заглушки


  clearPersonImg.addEventListener('click', function () {
    changeFotoImg.src = "".concat(window.location.protocol, "//").concat(window.location.host, "/images/dist/personal-photo.jpg");
    clearPersonImg.classList.remove('show');
    changeFotoImg.value = '';
  }); // const notificationsContainer = document.querySelector('.notifications__items')
  // class NotificationBlock {
  // 	constructor(title, message) {
  // 		this.title = title;
  // 		this.message = message;
  // 	}
  // 	render() {
  // 		const notificationItem = document.createElement('div');
  // 		notificationItem.classList.add('notification', 'default-block');
  // 		notificationItem.innerHTML = `
  // 			<div class="notification__header">
  // 				<h2 class="title">Уведомление</h2>
  // 				<a href="#" class="close"></a>
  // 			</div>
  // 			<div class="notification__content">
  // 				<div class="notification__title">${this.title}</div>
  // 				<div class="notification__message">${this.message}</div>
  // 			</div>
  // 		`;
  // 		notificationsContainer.append(notificationItem);
  // 	}
  // }
  // const messageArr = [
  // 	{ title: 'Заголовой1', message: 'Содержание1', show: true },
  // 	{ title: 'Заголовой2', message: 'Содержани2', show: true },
  // 	{ title: 'Заголовой3', message: 'Содержани3', show: false },
  // ];
  // const messageArrClone = [];
  // for (let i = messageArrClone.length; i < messageArr.length; i++) {
  // 	if (messageArr[i].show === true) {
  // 		messageArrClone.push(messageArr[i]);
  // 	}
  // }
  // notificationsContainer.innerHTML = "";
  // function renderNewMessage() {
  // 	messageArrClone.forEach(messageObj => {
  // 		new NotificationBlock(
  // 			messageObj.title,
  // 			messageObj.message
  // 		).render();
  // 		const audio = new Audio('../audio/test.mp3');
  // 		// audio.play();
  // 	})
  // }
  // renderNewMessage();
  // const notifications = notificationsContainer.querySelectorAll('.notification');
  // const showNotification = document.querySelector('.notifications__btn'),
  // 	countNotification = document.querySelector('.notification-count');
  // countNotification.innerText = messageArrClone.length;
  // showNotification.addEventListener('click', () => {
  // 	notifications.forEach(element => {
  // 		element.classList.add('show')
  // 	})
  // })
  // const input2 = document.querySelector('.input2');
  // let obj1 = { title: 'Заголовой4', message: 'Содержани4', show: false }
  // input2.addEventListener('click', () => {
  // 	messageArr.push(obj1);
  // 	new NotificationBlock(
  // 		obj1.title,
  // 		obj1.message
  // 	).render();
  // 	const audio = new Audio('../audio/test.mp3');
  // 	audio.play();
  // 	const notifications = notificationsContainer.querySelectorAll('.notification'),
  // 		notificationBtn = notificationsContainer.querySelectorAll('.close');
  // 	setTimeout(() => {
  // 		notifications[notifications.length - 1].classList.add('show');
  // 	}, 10)
  // 	setTimeout(() => {
  // 		notifications[notifications.length - 1].classList.remove('show');
  // 	}, 6000)
  // 	countNotification.innerText = notifications.length;
  // 	notificationBtn.forEach(closeBtn => {
  // 		closeBtn.addEventListener('click', e => {
  // 			e.preventDefault();
  // 			closeBtn.parentElement.parentElement.classList.remove('show');
  // 		})
  // 	})
  // 	showNotification.addEventListener('click', () => {
  // 		notifications.forEach(element => {
  // 			element.classList.toggle('show')
  // 		})
  // 	})
  // })
  // 
  // console.log(notifications)
});

/***/ }),
/* 1 */
/***/ (function(module, exports) {

function changeData() {
  // Change DATA
  // Card User
  var dataChange = document.querySelector('.change-data'),
      cancelChange = document.querySelector('.change-cancel'),
      saveData = document.querySelector('.save-data'),
      infoItemSpan = document.querySelectorAll('.item-text'),
      itemInput = document.querySelectorAll('.item-input');

  if (dataChange) {
    var enterEditMde = function enterEditMde() {
      infoItemSpan.forEach(function (element) {
        element.style.display = 'none';
      });
      itemInput.forEach(function (element) {
        element.style.display = 'block';
      });
      dataChange.classList.add('hide');
      cancelChange.classList.remove('hide');
    };

    var exitingEditMode = function exitingEditMode() {
      infoItemSpan.forEach(function (element) {
        element.style.display = '';
      });
      itemInput.forEach(function (element) {
        element.style.display = '';
        location.reload();
        element.style.borderColor = "";
      });
    };

    dataChange.addEventListener('click', function (e) {
      e.preventDefault();
      enterEditMde();
    });
    cancelChange.addEventListener('click', function (e) {
      e.preventDefault();
      exitingEditMode();
    });
    itemInput.forEach(function (element) {
      element.addEventListener('change', function () {
        element.style.borderColor = "#0079c2";
        saveData.classList.remove('hide');
        dataChange.classList.add('hide');
      });
    });
  }
}

module.exports = changeData;

/***/ }),
/* 2 */
/***/ (function(module, exports) {

// changeForms = require('~/app/libs/change-forms.js');
function dropDown() {
  // Вывод кол-во выбранных чекбоксов
  function countingSelectedItemsRadio(label, item) {
    var radioLabel = item.innerHTML,
        radioLabelTitle = label.querySelector('.radio-dropdown__label-text');
    radioLabelTitle.innerHTML = radioLabel;
  } // Вывод кол-во выбранных чекбоксов


  function countChekedItems() {
    var checkboxDropdown = document.querySelectorAll('.checkbox-dropdown');
    checkboxDropdown.forEach(function (dropdownItem) {
      var checkboxLabelText = dropdownItem.querySelector('.checkbox-dropdown__label-text'),
          checkboxInputs = dropdownItem.querySelectorAll('.checkbox__input');
      var countCheked = 0;
      checkboxInputs.forEach(function (radioInput) {
        if (radioInput.checked === true) {
          countCheked++;

          if (countCheked < 2 && countCheked > 0) {
            checkboxInputs.forEach(function (radioInput) {
              if (radioInput.checked === true) {
                checkboxLabelText.innerHTML = radioInput.parentElement.querySelector('.checkbox__label').innerHTML;
              }
            });
          } else if (countCheked > 1) {
            checkboxLabelText.innerHTML = "\u0412\u044B\u0431\u0440\u0430\u043D\u043E: ".concat(countCheked);
          } else {
            checkboxLabelText.innerHTML = ' Не выбрано';
          }
        }
      });
      dropdownItem.addEventListener('click', function (e) {
        if (e.target.classList.contains('checkbox__input') && e.target.checked === true) {
          countCheked++;

          if (countCheked < 2 && countCheked > 0) {
            checkboxInputs.forEach(function (radioInput) {
              if (radioInput.checked === true) {
                checkboxLabelText.innerHTML = radioInput.parentElement.querySelector('.checkbox__label').innerHTML;
              }
            });
          } else if (countCheked > 1) {
            checkboxLabelText.innerHTML = "\u0412\u044B\u0431\u0440\u0430\u043D\u043E: ".concat(countCheked);
          } else {
            checkboxLabelText.innerHTML = ' Не выбрано';
          }
        } else if (e.target.classList.contains('checkbox__input') && e.target.checked === false && countCheked > 0) {
          countCheked--;

          if (countCheked < 2 && countCheked > 0) {
            checkboxInputs.forEach(function (radioInput) {
              if (radioInput.checked === true) {
                checkboxLabelText.innerHTML = radioInput.parentElement.querySelector('.checkbox__label').innerHTML;
              }
            });
          } else if (countCheked > 1) {
            checkboxLabelText.innerHTML = "\u0412\u044B\u0431\u0440\u0430\u043D\u043E: ".concat(countCheked);
          } else {
            checkboxLabelText.innerHTML = ' Не выбрано';
          }
        }
      });
    });
  }

  countChekedItems(); // OPEN | CLOSE DROPDOWN ITEM

  document.addEventListener('click', function (e) {
    var dropdown = document.querySelectorAll('.dropdown');
    var target = e.target;
    var dropdownItem;

    if (target.closest('.radio')) {
      dropdownItem = target.closest('.radio').closest('.dropdown');
      dropdownItem.classList.remove('dropdown__in');
      var label = target.parentElement.querySelector('.radio__label');
      countingSelectedItemsRadio(dropdownItem, label);
    } else if (target.closest('.dropdown')) {
      removeClassIn(dropdown);
      dropdownItem = target.closest('.dropdown');
      dropdownItem.classList.add('dropdown__in');
    } else {
      removeClassIn(dropdown);
    }
  }); // Функция удаления активного класса у всех элементов

  function removeClassIn(arr) {
    arr.forEach(function (item) {
      item.classList.remove('dropdown__in');
    });
  }
}

module.exports = dropDown;

/***/ }),
/* 3 */
/***/ (function(module, exports) {

function modal() {
  if (document.querySelector('.address-book__link')) {
    // Функция открытия модального окна
    var show = function show(modal) {
      modal.classList.add('show-modal');
      modal.classList.remove('hide-modal');
    }; //Функция закрытия модального окна


    var hide = function hide(modal) {
      modal.classList.remove('show-modal');
      modal.classList.add('hide-modal');
    }; // СПРАВОЧНИК
    // Открытие справочника


    // MODAL
    var showAddressBook = document.querySelector('.address-book__link'),
        addressBook = document.querySelector('#address-book'),
        closeModal = document.querySelectorAll('.close');
    showAddressBook.addEventListener('click', function (e) {
      e.preventDefault();
      show(addressBook);
    }); // Открытие окна выода участка в ремонт
    // Закрытие модального окна по клику на кнопку

    closeModal.forEach(function (close) {
      close.addEventListener('click', function (e) {
        e.preventDefault();
        hide(addressBook);
      });
    }); // Закрытие модального окна по клику на подложку

    addressBook.addEventListener('click', function (e) {
      if (e.target === addressBook) {
        hide(addressBook);
      }
    }); // Закрытие модального окна нажатие клавиши Esc

    window.addEventListener('keydown', function (e) {
      if (e.keyCode == 27) {
        hide(addressBook);
      }
    });
  }
}

module.exports = modal;

/***/ }),
/* 4 */
/***/ (function(module, exports) {

function search() {
  // SEARCH
  if (document.querySelector('.search__input')) {
    var searchInput = document.querySelectorAll('.search__input');
    searchInput.forEach(function (inputElement) {
      inputElement.addEventListener('input', function (e) {
        var searchElementsList = inputElement.closest('.radio-dropdown__dropdown').querySelectorAll('.radio__label'); // Очистка поля от пробелов

        var inputVal = inputElement.value.trim(); // Create LABEL NO RESULT

        var labelNoResult = document.createElement('label');
        labelNoResult.classList.add('radio_no-result');
        labelNoResult.innerHTML = '<span class="radio__label">Не найдено</span>'; // Если val  не равно пустоте то запускаем поиск

        if (inputVal != "") {
          searchElementsList.forEach(function (element) {
            if (element.innerText.search(inputVal) == -1 && element.parentElement.classList.contains('radio')) {
              element.parentElement.classList.add('radio_hide');
            } else {
              element.parentElement.classList.remove('radio_hide');
            }
          });
        } else {
          searchElementsList.forEach(function (element) {
            element.parentElement.classList.remove('radio_hide');
          });
        }

        if (inputElement.parentElement.parentElement.querySelectorAll('.radio').length == inputElement.parentElement.parentElement.querySelectorAll('.radio_hide').length) {
          if (inputElement.parentElement.parentElement.querySelector('.radio_no-result')) {
            inputElement.parentElement.parentElement.querySelector('.radio_no-result').remove();
          }

          inputElement.parentElement.parentElement.querySelector('.radio-dropdown__radios').append(labelNoResult);
        } else {
          if (inputElement.parentElement.parentElement.querySelector('.radio_no-result')) {
            inputElement.parentElement.parentElement.querySelector('.radio_no-result').remove();
          }
        }
      });
    });
  }
}

module.exports = search;

/***/ }),
/* 5 */
/***/ (function(module, exports) {

// Tabs
function tabs() {
  // TABS
  if (document.querySelector('.tabs-header__items')) {
    var hideTabContent = function hideTabContent() {
      tabsContent.forEach(function (item) {
        item.classList.add('hide-tabs');
        item.classList.remove('show-tabs');
      });

      _tabs.forEach(function (item) {
        item.classList.remove('tabs-header__item_active');
      });
    };

    var showTabContent = function showTabContent() {
      var i = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      tabsContent[i].classList.add('show-tabs');
      tabsContent[i].classList.remove('hide-tabs');

      _tabs[i].classList.add('tabs-header__item_active');
    };

    var tabsParent = document.querySelector('.tabs-header__items'),
        _tabs = tabsParent.querySelectorAll('.tabs-header__item'),
        tabsContent = document.querySelectorAll('.tabs-content');

    hideTabContent();
    showTabContent();
    tabsParent.addEventListener('click', function (event) {
      var target = event.target;

      if (target && target.classList.contains('tabs-header__item')) {
        _tabs.forEach(function (item, i) {
          if (item == target) {
            hideTabContent();
            showTabContent(i);
          }
        });
      }
    });
  }
}

module.exports = tabs;

/***/ }),
/* 6 */
/***/ (function(module, exports) {

function addFile() {
  if (document.querySelector('.input-file')) {
    // Добавление файла
    var inputFile = document.querySelectorAll('.input-file');
    inputFile.forEach(function (input) {
      input.addEventListener('change', function (e) {
        var fileLabele = e.target.parentElement.querySelector('.file-label');
        fileLabele.classList.add('change'); // Вставка имени файла

        var fileName = document.createElement('span');
        fileName.classList.add('name-file');
        fileName.classList.add('opacity');
        var nameText = e.target.files[0].name;
        fileName.innerText = "".concat(nameText.substring(0, 4), ".").concat(nameText.slice(-4));
        e.target.parentElement.append(fileName); // Удаление файла загруженного по ошибке

        var removeFile = e.target.parentElement.querySelector('.remove-file');
        removeFile.addEventListener('click', function (e) {
          e.preventDefault();
          inputFile.value = '';
          fileLabele.classList.remove('change');
          fileName.remove();
        });
      });
    });
  }
}

module.exports = addFile;

/***/ })
/******/ ]);