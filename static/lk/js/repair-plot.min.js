/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
module.exports = __webpack_require__(2);


/***/ }),
/* 1 */
/***/ (function(module, exports) {

// // // Import jQuery module (npm i jquery)
// // import $ from 'jquery'
// // window.jQuery = $
// // window.$ = $
// // // Import vendor jQuery plugin example (not module)
// // require('~/app/libs/calendar.js');
// // import readXlsxFile from 'read-excel-file'
// document.addEventListener('DOMContentLoaded', () => {
// 	setTimeout(function () {
// 		document.querySelector('.preloader').classList.add("preloader-remove");
// 	})
// 	const changeForms = require('~/app/libs/change-forms.js'),
// 		changeData = require('~/app/libs/change-data.js'),
// 		dropDown = require('~/app/libs/drop-down.js'),
// 		modals = require('~/app/libs/modals.js'),
// 		search = require('~/app/libs/search.js'),
// 		tabs = require('~/app/libs/tabs.js'),
// 		addFile = require('~/app/libs/add-file.js');
// 	changeForms();
// 	changeData();
// 	dropDown();
// 	modals();
// 	search();
// 	tabs();
// 	addFile();
// 	const notificationsContainer = document.querySelector('.notifications__items')
// 	class NotificationBlock {
// 		constructor(title, message) {
// 			this.title = title;
// 			this.message = message;
// 		}
// 		render() {
// 			const notificationItem = document.createElement('div');
// 			notificationItem.classList.add('notification', 'default-block');
// 			notificationItem.innerHTML = `
// 				<div class="notification__header">
// 					<h2 class="title">Уведомление</h2>
// 					<a href="#" class="close"></a>
// 				</div>
// 				<div class="notification__content">
// 					<div class="notification__title">${this.title}</div>
// 					<div class="notification__message">${this.message}</div>
// 				</div>
// 			`;
// 			notificationsContainer.append(notificationItem);
// 		}
// 	}
// 	const messageArr = [
// 		{ title: 'Заголовой1', message: 'Содержание1', show: true },
// 		{ title: 'Заголовой2', message: 'Содержани2', show: true },
// 		{ title: 'Заголовой3', message: 'Содержани3', show: false },
// 	];
// 	const messageArrClone = [];
// 	for (let i = messageArrClone.length; i < messageArr.length; i++) {
// 		if (messageArr[i].show === true) {
// 			messageArrClone.push(messageArr[i]);
// 		}
// 	}
// 	notificationsContainer.innerHTML = "";
// 	function renderNewMessage() {
// 		messageArrClone.forEach(messageObj => {
// 			new NotificationBlock(
// 				messageObj.title,
// 				messageObj.message
// 			).render();
// 			const audio = new Audio('../audio/test.mp3');
// 			// audio.play();
// 		})
// 	}
// 	renderNewMessage();
// 	const notifications = notificationsContainer.querySelectorAll('.notification');
// 	const showNotification = document.querySelector('.notifications__btn'),
// 		countNotification = document.querySelector('.notification-count');
// 	countNotification.innerText = messageArrClone.length;
// 	showNotification.addEventListener('click', () => {
// 		notifications.forEach(element => {
// 			element.classList.add('show')
// 		})
// 	})
// 	const input2 = document.querySelector('.input2');
// 	let obj1 = { title: 'Заголовой4', message: 'Содержани4', show: false }
// 	input2.addEventListener('click', () => {
// 		messageArr.push(obj1);
// 		new NotificationBlock(
// 			obj1.title,
// 			obj1.message
// 		).render();
// 		const audio = new Audio('../audio/test.mp3');
// 		audio.play();
// 		const notifications = notificationsContainer.querySelectorAll('.notification'),
// 			notificationBtn = notificationsContainer.querySelectorAll('.close');
// 		setTimeout(() => {
// 			notifications[notifications.length - 1].classList.add('show');
// 		}, 10)
// 		setTimeout(() => {
// 			notifications[notifications.length - 1].classList.remove('show');
// 		}, 6000)
// 		countNotification.innerText = notifications.length;
// 		notificationBtn.forEach(closeBtn => {
// 			closeBtn.addEventListener('click', e => {
// 				e.preventDefault();
// 				closeBtn.parentElement.parentElement.classList.remove('show');
// 			})
// 		})
// 		showNotification.addEventListener('click', () => {
// 			notifications.forEach(element => {
// 				element.classList.toggle('show')
// 			})
// 		})
// 	})
// 	// 
// 	// console.log(notifications)
// });

/***/ }),
/* 2 */
/***/ (function(module, exports) {

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

// Тестовый массив с объектами труб
var testArr = [{
  //Общие даные
  number: '1',
  //Номер трубы
  status: '1',
  //Статус
  dlina: '8',
  //Длина
  stenka: '8',
  //Толщина стенки
  construkciya: '8',
  //Одношов, двушов
  int_psh: '12:00',
  // Входящий ПШ
  out_psh: '12:00',
  // Исходящий ПШ
  // Перемычки заглушки
  peremichka_up: false,
  //Перемычка верх
  peremichka_down: false,
  //Перемычка низ
  zaglushka_ug: false,
  //заглушка с юж.стороны
  zaglushka_sever: false,
  //заглушка с север.стороны
  // Оводы
  otvod_izgib: '6',
  //Угол отвода
  otvod_napravleniye: 'В',
  //Верт,Гориз
  // Коменты
  comment_1: 'comment1',
  comment_2: 'comment2',
  comment_3: 'comment3',
  // Дефекты
  def_1: 'ЗПТ',
  //Дефект
  def_1_type_rem: 'Наплавка',
  //Тип ремонта
  def_1_percent: '99',
  //Процент
  def_1_km: '400',
  //Километр
  def_1_piket: '350',
  //Пикет
  def_2: 'АКШ',
  def_2_type_rem: '',
  //Тип ремонта
  def_2_percent: '12',
  def_2_km: '313',
  def_2_piket: '123',
  // Техника
  tehnic_1: {
    type: 'АРС',
    model: 'АРС123',
    icon: 'ars.jpg'
  },
  tehnic_2: {
    type: 'АРС',
    model: 'АРС123',
    icon: 'ars.jpg'
  },
  tehnic_3: {
    type: 'АРС',
    model: 'АРС123',
    icon: 'ars.jpg'
  },
  uch_trub: 123
}, {
  //Общие даные
  number: '2',
  //Номер трубы
  status: '3',
  //Статус
  dlina: '8',
  //Длина
  stenka: '8',
  //Толщина стенки
  construkciya: '8',
  //Одношов, двушов
  int_psh: '12:00',
  // Входящий ПШ
  out_psh: '12:00',
  // Исходящий ПШ
  // Перемычки заглушки
  peremichka_up: false,
  //Перемычка верх
  peremichka_down: false,
  //Перемычка низ
  zaglushka_ug: false,
  //заглушка с юж.стороны
  zaglushka_sever: false,
  //заглушка с север.стороны
  // Оводы
  otvod: false,
  //Угол отвода
  otvod_izgib: '6',
  //Угол отвода
  otvod_napravleniye: 'В',
  //Верт,Гориз
  // Коменты
  comment_1: 'comment1',
  comment_2: 'comment2',
  comment_3: 'comment3',
  // Дефекты
  def_1: 'ЗПТ',
  //Дефект
  def_1_type_rem: '',
  //Тип ремонта
  def_1_percent: '32',
  //Процент
  def_1_km: '400',
  //Километр
  def_1_piket: '350',
  //Пикет
  def_2: '',
  def_2_type_rem: '',
  //Тип ремонта
  def_2_percent: '',
  def_2_km: '',
  def_2_piket: '',
  // Техника
  tehnic_1: {
    type: '',
    model: '',
    icon: ''
  },
  tehnic_2: {
    type: '',
    model: '',
    icon: ''
  },
  tehnic_3: {
    type: '',
    model: '',
    icon: ''
  },
  uch_trub: 123
}, {
  //Общие даные
  number: '3',
  //Номер трубы
  status: '6',
  //Статус
  dlina: '8',
  //Длина
  stenka: '8',
  //Толщина стенки
  construkciya: '8',
  //Одношов, двушов
  int_psh: '12:00',
  // Входящий ПШ
  out_psh: '12:00',
  // Исходящий ПШ
  // Перемычки заглушки
  peremichka_up: false,
  //Перемычка верх
  peremichka_down: false,
  //Перемычка низ
  zaglushka_ug: false,
  //заглушка с юж.стороны
  zaglushka_sever: false,
  //заглушка с север.стороны
  // Оводы
  otvod_izgib: '6',
  //Угол отвода
  otvod_napravleniye: 'В',
  //Верт,Гориз
  // Коменты
  comment_1: 'comment1',
  comment_2: 'comment2',
  comment_3: 'comment3',
  // Дефекты
  def_1: 'ЗПТ',
  //Дефект
  def_1_type_rem: 'ЗПТ',
  //Тип ремонта
  def_1_percent: '32',
  //Процент
  def_1_km: '400',
  //Километр
  def_1_piket: '350',
  //Пикет
  def_2: 'ЗПТ',
  def_2_percent: '',
  def_2_km: '',
  def_2_piket: '',
  // Техника
  tehnic_1: {
    type: '',
    model: '',
    icon: ''
  },
  tehnic_2: {
    type: '',
    model: '',
    icon: ''
  },
  tehnic_3: {
    type: '',
    model: '',
    icon: ''
  },
  uch_trub: 12
}, {
  //Общие даные
  number: '4',
  //Номер трубы
  status: '1',
  //Статус
  dlina: '8',
  //Длина
  stenka: '8',
  //Толщина стенки
  construkciya: '8',
  //Одношов, двушов
  int_psh: '12:00',
  // Входящий ПШ
  out_psh: '12:00',
  // Исходящий ПШ
  // Перемычки заглушки
  peremichka_up: false,
  //Перемычка верх
  peremichka_down: false,
  //Перемычка низ
  zaglushka_ug: false,
  //заглушка с юж.стороны
  zaglushka_sever: false,
  //заглушка с север.стороны
  // Оводы
  otvod: true,
  //Угол отвода
  otvod_izgib: '6',
  //Угол отвода
  otvod_napravleniye: 'В',
  //Верт,Гориз
  // Коменты
  comment_1: 'comment1',
  comment_2: 'comment2',
  comment_3: 'comment3',
  // Дефекты
  def_1: '',
  //Дефект
  def_1_type_rem: 'ЗПТ',
  //Тип ремонта
  def_1_percent: '32',
  //Процент
  def_1_km: '400',
  //Километр
  def_1_piket: '350',
  //Пикет
  def_2: 'Trf',
  def_2_percent: '',
  def_2_km: '',
  def_2_piket: '',
  // Техника
  tehnic_1: {
    type: '',
    model: '',
    icon: ''
  },
  tehnic_2: {
    type: '',
    model: '',
    icon: ''
  },
  tehnic_3: {
    type: '',
    model: '',
    icon: ''
  },
  uch_trub: 123
}, {
  //Общие даные
  number: '5',
  //Номер трубы
  status: '1',
  //Статус
  dlina: '8',
  //Длина
  stenka: '8',
  //Толщина стенки
  construkciya: '8',
  //Одношов, двушов
  int_psh: '12:00',
  // Входящий ПШ
  out_psh: '12:00',
  // Исходящий ПШ
  // Перемычки заглушки
  peremichka_up: false,
  //Перемычка верх
  peremichka_down: false,
  //Перемычка низ
  zaglushka_ug: false,
  //заглушка с юж.стороны
  zaglushka_sever: false,
  //заглушка с север.стороны
  // Оводы
  otvod_izgib: '6',
  //Угол отвода
  otvod_napravleniye: 'В',
  //Верт,Гориз
  // Коменты
  comment_1: 'comment1',
  comment_2: 'comment2',
  comment_3: 'comment3',
  // Дефекты
  def_1: 'ЗПТ',
  //Дефект
  def_1_type_rem: 'ЗПТ',
  //Тип ремонта
  def_1_percent: '32',
  //Процент
  def_1_km: '400',
  //Километр
  def_1_piket: '350',
  //Пикет
  def_2: 'ЗПТ',
  def_2_percent: '',
  def_2_km: '',
  def_2_piket: '',
  // Техника
  tehnic_1: {
    type: '',
    model: '',
    icon: ''
  },
  tehnic_2: {
    type: '',
    model: '',
    icon: ''
  },
  tehnic_3: {
    type: '',
    model: '',
    icon: ''
  },
  uch_trub: 123
}, {
  //Общие даные
  number: '0',
  //Номер трубы
  status: '1',
  //Статус
  dlina: '8',
  //Длина
  stenka: '8',
  //Толщина стенки
  construkciya: '8',
  //Одношов, двушов
  int_psh: '12:00',
  // Входящий ПШ
  out_psh: '12:00',
  // Исходящий ПШ
  // Перемычки заглушки
  peremichka_up: false,
  //Перемычка верх
  peremichka_down: false,
  //Перемычка низ
  zaglushka_ug: false,
  //заглушка с юж.стороны
  zaglushka_sever: false,
  //заглушка с север.стороны
  // Оводы
  otvod: true,
  //Угол отвода
  otvod_izgib: '6',
  //Угол отвода
  otvod_napravleniye: 'В',
  //Верт,Гориз
  // Коменты
  comment_1: 'comment1',
  comment_2: 'comment2',
  comment_3: 'comment3',
  // Дефекты
  def_1: '',
  //Дефект
  def_1_type_rem: 'ЗПТ',
  //Тип ремонта
  def_1_percent: '32',
  //Процент
  def_1_km: '400',
  //Километр
  def_1_piket: '350',
  //Пикет
  def_2: 'Trf',
  def_2_percent: '',
  def_2_km: '',
  def_2_piket: '',
  // Техника
  tehnic_1: {
    type: '',
    model: '',
    icon: ''
  },
  tehnic_2: {
    type: '',
    model: '',
    icon: ''
  },
  tehnic_3: {
    type: '',
    model: '',
    icon: ''
  },
  uch_trub: 123
}, {
  //Общие даные
  number: '6',
  //Номер трубы
  status: '1',
  //Статус
  dlina: '8',
  //Длина
  stenka: '8',
  //Толщина стенки
  construkciya: '8',
  //Одношов, двушов
  int_psh: '12:00',
  // Входящий ПШ
  out_psh: '12:00',
  // Исходящий ПШ
  // Перемычки заглушки
  peremichka_up: false,
  //Перемычка верх
  peremichka_down: false,
  //Перемычка низ
  zaglushka_ug: false,
  //заглушка с юж.стороны
  zaglushka_sever: false,
  //заглушка с север.стороны
  // Оводы
  otvod_izgib: '6',
  //Угол отвода
  otvod_napravleniye: 'В',
  //Верт,Гориз
  // Коменты
  comment_1: 'comment1',
  comment_2: 'comment2',
  comment_3: 'comment3',
  // Дефекты
  def_1: 'ЗПТ',
  //Дефект
  def_1_type_rem: 'ЗПТ',
  //Тип ремонта
  def_1_percent: '32',
  //Процент
  def_1_km: '400',
  //Километр
  def_1_piket: '350',
  //Пикет
  def_2: 'ЗПТ',
  def_2_percent: '',
  def_2_km: '',
  def_2_piket: '',
  // Техника
  tehnic_1: {
    type: '',
    model: '',
    icon: ''
  },
  tehnic_2: {
    type: '',
    model: '',
    icon: ''
  },
  tehnic_3: {
    type: '',
    model: '',
    icon: ''
  },
  uch_trub: 123
}, {
  //Общие даные
  number: '7',
  //Номер трубы
  status: '1',
  //Статус
  dlina: '8',
  //Длина
  stenka: '8',
  //Толщина стенки
  construkciya: '8',
  //Одношов, двушов
  int_psh: '12:00',
  // Входящий ПШ
  out_psh: '12:00',
  // Исходящий ПШ
  // Перемычки заглушки
  peremichka_up: false,
  //Перемычка верх
  peremichka_down: false,
  //Перемычка низ
  zaglushka_ug: false,
  //заглушка с юж.стороны
  zaglushka_sever: false,
  //заглушка с север.стороны
  // Оводы
  otvod_izgib: '6',
  //Угол отвода
  otvod_napravleniye: 'В',
  //Верт,Гориз
  // Коменты
  comment_1: 'comment1',
  comment_2: 'comment2',
  comment_3: 'comment3',
  // Дефекты
  def_1: 'ЗПТ',
  //Дефект
  def_1_type_rem: 'Наплавка',
  //Тип ремонта
  def_1_percent: '99',
  //Процент
  def_1_km: '400',
  //Километр
  def_1_piket: '350',
  //Пикет
  def_2: 'АКШ',
  def_2_type_rem: '',
  //Тип ремонта
  def_2_percent: '12',
  def_2_km: '313',
  def_2_piket: '123',
  // Техника
  tehnic_1: {
    type: 'АРС',
    model: 'АРС123',
    icon: 'ars.jpg'
  },
  tehnic_2: {
    type: 'АРС',
    model: 'АРС123',
    icon: 'ars.jpg'
  },
  tehnic_3: {
    type: 'АРС',
    model: 'АРС123',
    icon: 'ars.jpg'
  },
  uch_trub: 123
}, {
  //Общие даные
  number: '8',
  //Номер трубы
  status: '3',
  //Статус
  dlina: '8',
  //Длина
  stenka: '8',
  //Толщина стенки
  construkciya: '8',
  //Одношов, двушов
  int_psh: '12:00',
  // Входящий ПШ
  out_psh: '12:00',
  // Исходящий ПШ
  // Перемычки заглушки
  peremichka_up: false,
  //Перемычка верх
  peremichka_down: false,
  //Перемычка низ
  zaglushka_ug: false,
  //заглушка с юж.стороны
  zaglushka_sever: false,
  //заглушка с север.стороны
  // Оводы
  otvod: false,
  //Угол отвода
  otvod_izgib: '6',
  //Угол отвода
  otvod_napravleniye: 'В',
  //Верт,Гориз
  // Коменты
  comment_1: 'comment1',
  comment_2: 'comment2',
  comment_3: 'comment3',
  // Дефекты
  def_1: 'ЗПТ',
  //Дефект
  def_1_type_rem: '',
  //Тип ремонта
  def_1_percent: '32',
  //Процент
  def_1_km: '400',
  //Километр
  def_1_piket: '350',
  //Пикет
  def_2: '',
  def_2_type_rem: '',
  //Тип ремонта
  def_2_percent: '',
  def_2_km: '',
  def_2_piket: '',
  // Техника
  tehnic_1: {
    type: '',
    model: '',
    icon: ''
  },
  tehnic_2: {
    type: '',
    model: '',
    icon: ''
  },
  tehnic_3: {
    type: '',
    model: '',
    icon: ''
  },
  uch_trub: 123
}, {
  //Общие даные
  number: '9',
  //Номер трубы
  status: '1',
  //Статус
  dlina: '8',
  //Длина
  stenka: '8',
  //Толщина стенки
  construkciya: '8',
  //Одношов, двушов
  int_psh: '12:00',
  // Входящий ПШ
  out_psh: '12:00',
  // Исходящий ПШ
  // Перемычки заглушки
  peremichka_up: false,
  //Перемычка верх
  peremichka_down: false,
  //Перемычка низ
  zaglushka_ug: false,
  //заглушка с юж.стороны
  zaglushka_sever: false,
  //заглушка с север.стороны
  // Оводы
  otvod_izgib: '6',
  //Угол отвода
  otvod_napravleniye: 'В',
  //Верт,Гориз
  // Коменты
  comment_1: 'comment1',
  comment_2: 'comment2',
  comment_3: 'comment3',
  // Дефекты
  def_1: 'ЗПТ',
  //Дефект
  def_1_type_rem: 'ЗПТ',
  //Тип ремонта
  def_1_percent: '32',
  //Процент
  def_1_km: '400',
  //Километр
  def_1_piket: '350',
  //Пикет
  def_2: 'ЗПТ',
  def_2_percent: '',
  def_2_km: '',
  def_2_piket: '',
  // Техника
  tehnic_1: {
    type: '',
    model: '',
    icon: ''
  },
  tehnic_2: {
    type: '',
    model: '',
    icon: ''
  },
  tehnic_3: {
    type: '',
    model: '',
    icon: ''
  },
  uch_trub: 123
}, {
  //Общие даные
  number: '10',
  //Номер трубы
  status: '1',
  //Статус
  dlina: '8',
  //Длина
  stenka: '8',
  //Толщина стенки
  construkciya: '8',
  //Одношов, двушов
  int_psh: '12:00',
  // Входящий ПШ
  out_psh: '12:00',
  // Исходящий ПШ
  // Перемычки заглушки
  peremichka_up: false,
  //Перемычка верх
  peremichka_down: false,
  //Перемычка низ
  zaglushka_ug: false,
  //заглушка с юж.стороны
  zaglushka_sever: false,
  //заглушка с север.стороны
  // Оводы
  otvod: true,
  //Угол отвода
  otvod_izgib: '6',
  //Угол отвода
  otvod_napravleniye: 'В',
  //Верт,Гориз
  // Коменты
  comment_1: 'comment1',
  comment_2: 'comment2',
  comment_3: 'comment3',
  // Дефекты
  def_1: '',
  //Дефект
  def_1_type_rem: 'ЗПТ',
  //Тип ремонта
  def_1_percent: '32',
  //Процент
  def_1_km: '400',
  //Километр
  def_1_piket: '350',
  //Пикет
  def_2: 'Trf',
  def_2_percent: '',
  def_2_km: '',
  def_2_piket: '',
  // Техника
  tehnic_1: {
    type: '',
    model: '',
    icon: ''
  },
  tehnic_2: {
    type: '',
    model: '',
    icon: ''
  },
  tehnic_3: {
    type: '',
    model: '',
    icon: ''
  },
  uch_trub: 123
}, {
  //Общие даные
  number: '11',
  //Номер трубы
  status: '1',
  //Статус
  dlina: '8',
  //Длина
  stenka: '8',
  //Толщина стенки
  construkciya: '8',
  //Одношов, двушов
  int_psh: '12:00',
  // Входящий ПШ
  out_psh: '12:00',
  // Исходящий ПШ
  // Перемычки заглушки
  peremichka_up: false,
  //Перемычка верх
  peremichka_down: false,
  //Перемычка низ
  zaglushka_ug: false,
  //заглушка с юж.стороны
  zaglushka_sever: false,
  //заглушка с север.стороны
  // Оводы
  otvod_izgib: '6',
  //Угол отвода
  otvod_napravleniye: 'В',
  //Верт,Гориз
  // Коменты
  comment_1: 'comment1',
  comment_2: 'comment2',
  comment_3: 'comment3',
  // Дефекты
  def_1: 'ЗПТ',
  //Дефект
  def_1_type_rem: 'Наплавка',
  //Тип ремонта
  def_1_percent: '99',
  //Процент
  def_1_km: '400',
  //Километр
  def_1_piket: '350',
  //Пикет
  def_2: 'АКШ',
  def_2_type_rem: '',
  //Тип ремонта
  def_2_percent: '12',
  def_2_km: '313',
  def_2_piket: '123',
  // Техника
  tehnic_1: {
    type: 'АРС',
    model: 'АРС123',
    icon: 'ars.jpg'
  },
  tehnic_2: {
    type: 'АРС',
    model: 'АРС123',
    icon: 'ars.jpg'
  },
  tehnic_3: {
    type: 'АРС',
    model: 'АРС123',
    icon: 'ars.jpg'
  },
  uch_trub: 123
}, {
  //Общие даные
  number: '12',
  //Номер трубы
  status: '3',
  //Статус
  dlina: '8',
  //Длина
  stenka: '8',
  //Толщина стенки
  construkciya: '8',
  //Одношов, двушов
  int_psh: '12:00',
  // Входящий ПШ
  out_psh: '12:00',
  // Исходящий ПШ
  // Перемычки заглушки
  peremichka_up: false,
  //Перемычка верх
  peremichka_down: false,
  //Перемычка низ
  zaglushka_ug: false,
  //заглушка с юж.стороны
  zaglushka_sever: false,
  //заглушка с север.стороны
  // Оводы
  otvod: false,
  //Угол отвода
  otvod_izgib: '6',
  //Угол отвода
  otvod_napravleniye: 'В',
  //Верт,Гориз
  // Коменты
  comment_1: 'comment1',
  comment_2: 'comment2',
  comment_3: 'comment3',
  // Дефекты
  def_1: 'ЗПТ',
  //Дефект
  def_1_type_rem: '',
  //Тип ремонта
  def_1_percent: '32',
  //Процент
  def_1_km: '400',
  //Километр
  def_1_piket: '350',
  //Пикет
  def_2: '',
  def_2_type_rem: '',
  //Тип ремонта
  def_2_percent: '',
  def_2_km: '',
  def_2_piket: '',
  // Техника
  tehnic_1: {
    type: '',
    model: '',
    icon: ''
  },
  tehnic_2: {
    type: '',
    model: '',
    icon: ''
  },
  tehnic_3: {
    type: '',
    model: '',
    icon: ''
  },
  uch_trub: 123
}, {
  //Общие даные
  number: '13',
  //Номер трубы
  status: '6',
  //Статус
  dlina: '8',
  //Длина
  stenka: '8',
  //Толщина стенки
  construkciya: '8',
  //Одношов, двушов
  int_psh: '12:00',
  // Входящий ПШ
  out_psh: '12:00',
  // Исходящий ПШ
  // Перемычки заглушки
  peremichka_up: false,
  //Перемычка верх
  peremichka_down: false,
  //Перемычка низ
  zaglushka_ug: false,
  //заглушка с юж.стороны
  zaglushka_sever: false,
  //заглушка с север.стороны
  // Оводы
  otvod_izgib: '6',
  //Угол отвода
  otvod_napravleniye: 'В',
  //Верт,Гориз
  // Коменты
  comment_1: 'comment1',
  comment_2: 'comment2',
  comment_3: 'comment3',
  // Дефекты
  def_1: 'ЗПТ',
  //Дефект
  def_1_type_rem: 'ЗПТ',
  //Тип ремонта
  def_1_percent: '32',
  //Процент
  def_1_km: '400',
  //Километр
  def_1_piket: '350',
  //Пикет
  def_2: 'ЗПТ',
  def_2_percent: '',
  def_2_km: '',
  def_2_piket: '',
  // Техника
  tehnic_1: {
    type: '',
    model: '',
    icon: ''
  },
  tehnic_2: {
    type: '',
    model: '',
    icon: ''
  },
  tehnic_3: {
    type: '',
    model: '',
    icon: ''
  },
  uch_trub: 12
}, {
  //Общие даные
  number: '14',
  //Номер трубы
  status: '1',
  //Статус
  dlina: '8',
  //Длина
  stenka: '8',
  //Толщина стенки
  construkciya: '8',
  //Одношов, двушов
  int_psh: '12:00',
  // Входящий ПШ
  out_psh: '12:00',
  // Исходящий ПШ
  // Перемычки заглушки
  peremichka_up: false,
  //Перемычка верх
  peremichka_down: false,
  //Перемычка низ
  zaglushka_ug: false,
  //заглушка с юж.стороны
  zaglushka_sever: false,
  //заглушка с север.стороны
  // Оводы
  otvod: true,
  //Угол отвода
  otvod_izgib: '6',
  //Угол отвода
  otvod_napravleniye: 'В',
  //Верт,Гориз
  // Коменты
  comment_1: 'comment1',
  comment_2: 'comment2',
  comment_3: 'comment3',
  // Дефекты
  def_1: '',
  //Дефект
  def_1_type_rem: 'ЗПТ',
  //Тип ремонта
  def_1_percent: '32',
  //Процент
  def_1_km: '400',
  //Километр
  def_1_piket: '350',
  //Пикет
  def_2: 'Trf',
  def_2_percent: '',
  def_2_km: '',
  def_2_piket: '',
  // Техника
  tehnic_1: {
    type: '',
    model: '',
    icon: ''
  },
  tehnic_2: {
    type: '',
    model: '',
    icon: ''
  },
  tehnic_3: {
    type: '',
    model: '',
    icon: ''
  },
  uch_trub: 123
}, {
  //Общие даные
  number: '15',
  //Номер трубы
  status: '1',
  //Статус
  dlina: '8',
  //Длина
  stenka: '8',
  //Толщина стенки
  construkciya: '8',
  //Одношов, двушов
  int_psh: '12:00',
  // Входящий ПШ
  out_psh: '12:00',
  // Исходящий ПШ
  // Перемычки заглушки
  peremichka_up: false,
  //Перемычка верх
  peremichka_down: false,
  //Перемычка низ
  zaglushka_ug: false,
  //заглушка с юж.стороны
  zaglushka_sever: false,
  //заглушка с север.стороны
  // Оводы
  otvod_izgib: '6',
  //Угол отвода
  otvod_napravleniye: 'В',
  //Верт,Гориз
  // Коменты
  comment_1: 'comment1',
  comment_2: 'comment2',
  comment_3: 'comment3',
  // Дефекты
  def_1: 'ЗПТ',
  //Дефект
  def_1_type_rem: 'ЗПТ',
  //Тип ремонта
  def_1_percent: '32',
  //Процент
  def_1_km: '400',
  //Километр
  def_1_piket: '350',
  //Пикет
  def_2: 'ЗПТ',
  def_2_percent: '',
  def_2_km: '',
  def_2_piket: '',
  // Техника
  tehnic_1: {
    type: '',
    model: '',
    icon: ''
  },
  tehnic_2: {
    type: '',
    model: '',
    icon: ''
  },
  tehnic_3: {
    type: '',
    model: '',
    icon: ''
  },
  uch_trub: 123
}, {
  //Общие даные
  number: '16',
  //Номер трубы
  status: '1',
  //Статус
  dlina: '8',
  //Длина
  stenka: '8',
  //Толщина стенки
  construkciya: '8',
  //Одношов, двушов
  int_psh: '12:00',
  // Входящий ПШ
  out_psh: '12:00',
  // Исходящий ПШ
  // Перемычки заглушки
  peremichka_up: false,
  //Перемычка верх
  peremichka_down: false,
  //Перемычка низ
  zaglushka_ug: false,
  //заглушка с юж.стороны
  zaglushka_sever: false,
  //заглушка с север.стороны
  // Оводы
  otvod: true,
  //Угол отвода
  otvod_izgib: '6',
  //Угол отвода
  otvod_napravleniye: 'В',
  //Верт,Гориз
  // Коменты
  comment_1: 'comment1',
  comment_2: 'comment2',
  comment_3: 'comment3',
  // Дефекты
  def_1: '',
  //Дефект
  def_1_type_rem: 'ЗПТ',
  //Тип ремонта
  def_1_percent: '32',
  //Процент
  def_1_km: '400',
  //Километр
  def_1_piket: '350',
  //Пикет
  def_2: 'Trf',
  def_2_percent: '',
  def_2_km: '',
  def_2_piket: '',
  // Техника
  tehnic_1: {
    type: '',
    model: '',
    icon: ''
  },
  tehnic_2: {
    type: '',
    model: '',
    icon: ''
  },
  tehnic_3: {
    type: '',
    model: '',
    icon: ''
  },
  uch_trub: 123
}, {
  //Общие даные
  number: '17',
  //Номер трубы
  status: '1',
  //Статус
  dlina: '8',
  //Длина
  stenka: '8',
  //Толщина стенки
  construkciya: '8',
  //Одношов, двушов
  int_psh: '12:00',
  // Входящий ПШ
  out_psh: '12:00',
  // Исходящий ПШ
  // Перемычки заглушки
  peremichka_up: false,
  //Перемычка верх
  peremichka_down: false,
  //Перемычка низ
  zaglushka_ug: false,
  //заглушка с юж.стороны
  zaglushka_sever: false,
  //заглушка с север.стороны
  // Оводы
  otvod_izgib: '6',
  //Угол отвода
  otvod_napravleniye: 'В',
  //Верт,Гориз
  // Коменты
  comment_1: 'comment1',
  comment_2: 'comment2',
  comment_3: 'comment3',
  // Дефекты
  def_1: 'ЗПТ',
  //Дефект
  def_1_type_rem: 'ЗПТ',
  //Тип ремонта
  def_1_percent: '32',
  //Процент
  def_1_km: '400',
  //Километр
  def_1_piket: '350',
  //Пикет
  def_2: 'ЗПТ',
  def_2_percent: '',
  def_2_km: '',
  def_2_piket: '',
  // Техника
  tehnic_1: {
    type: '',
    model: '',
    icon: ''
  },
  tehnic_2: {
    type: '',
    model: '',
    icon: ''
  },
  tehnic_3: {
    type: '',
    model: '',
    icon: ''
  },
  uch_trub: 123
}, {
  //Общие даные
  number: '18',
  //Номер трубы
  status: '1',
  //Статус
  dlina: '8',
  //Длина
  stenka: '8',
  //Толщина стенки
  construkciya: '8',
  //Одношов, двушов
  int_psh: '12:00',
  // Входящий ПШ
  out_psh: '12:00',
  // Исходящий ПШ
  // Перемычки заглушки
  peremichka_up: false,
  //Перемычка верх
  peremichka_down: false,
  //Перемычка низ
  zaglushka_ug: false,
  //заглушка с юж.стороны
  zaglushka_sever: false,
  //заглушка с север.стороны
  // Оводы
  otvod_izgib: '6',
  //Угол отвода
  otvod_napravleniye: 'В',
  //Верт,Гориз
  // Коменты
  comment_1: 'comment1',
  comment_2: 'comment2',
  comment_3: 'comment3',
  // Дефекты
  def_1: 'ЗПТ',
  //Дефект
  def_1_type_rem: 'Наплавка',
  //Тип ремонта
  def_1_percent: '99',
  //Процент
  def_1_km: '400',
  //Километр
  def_1_piket: '350',
  //Пикет
  def_2: 'АКШ',
  def_2_type_rem: '',
  //Тип ремонта
  def_2_percent: '12',
  def_2_km: '313',
  def_2_piket: '123',
  // Техника
  tehnic_1: {
    type: 'АРС',
    model: 'АРС123',
    icon: 'ars.jpg'
  },
  tehnic_2: {
    type: 'АРС',
    model: 'АРС123',
    icon: 'ars.jpg'
  },
  tehnic_3: {
    type: 'АРС',
    model: 'АРС123',
    icon: 'ars.jpg'
  },
  uch_trub: 123
}, {
  //Общие даные
  number: '19',
  //Номер трубы
  status: '3',
  //Статус
  dlina: '8',
  //Длина
  stenka: '8',
  //Толщина стенки
  construkciya: '8',
  //Одношов, двушов
  int_psh: '12:00',
  // Входящий ПШ
  out_psh: '12:00',
  // Исходящий ПШ
  // Перемычки заглушки
  peremichka_up: false,
  //Перемычка верх
  peremichka_down: false,
  //Перемычка низ
  zaglushka_ug: false,
  //заглушка с юж.стороны
  zaglushka_sever: false,
  //заглушка с север.стороны
  // Оводы
  otvod: false,
  //Угол отвода
  otvod_izgib: '6',
  //Угол отвода
  otvod_napravleniye: 'В',
  //Верт,Гориз
  // Коменты
  comment_1: 'comment1',
  comment_2: 'comment2',
  comment_3: 'comment3',
  // Дефекты
  def_1: 'ЗПТ',
  //Дефект
  def_1_type_rem: '',
  //Тип ремонта
  def_1_percent: '32',
  //Процент
  def_1_km: '400',
  //Километр
  def_1_piket: '350',
  //Пикет
  def_2: '',
  def_2_type_rem: '',
  //Тип ремонта
  def_2_percent: '',
  def_2_km: '',
  def_2_piket: '',
  // Техника
  tehnic_1: {
    type: '',
    model: '',
    icon: ''
  },
  tehnic_2: {
    type: '',
    model: '',
    icon: ''
  },
  tehnic_3: {
    type: '',
    model: '',
    icon: ''
  },
  uch_trub: 123
}, {
  //Общие даные
  number: '20',
  //Номер трубы
  status: '1',
  //Статус
  dlina: '8',
  //Длина
  stenka: '8',
  //Толщина стенки
  construkciya: '8',
  //Одношов, двушов
  int_psh: '12:00',
  // Входящий ПШ
  out_psh: '12:00',
  // Исходящий ПШ
  // Перемычки заглушки
  peremichka_up: false,
  //Перемычка верх
  peremichka_down: false,
  //Перемычка низ
  zaglushka_ug: false,
  //заглушка с юж.стороны
  zaglushka_sever: false,
  //заглушка с север.стороны
  // Оводы
  otvod_izgib: '6',
  //Угол отвода
  otvod_napravleniye: 'В',
  //Верт,Гориз
  // Коменты
  comment_1: 'comment1',
  comment_2: 'comment2',
  comment_3: 'comment3',
  // Дефекты
  def_1: 'ЗПТ',
  //Дефект
  def_1_type_rem: 'ЗПТ',
  //Тип ремонта
  def_1_percent: '32',
  //Процент
  def_1_km: '400',
  //Километр
  def_1_piket: '350',
  //Пикет
  def_2: 'ЗПТ',
  def_2_percent: '',
  def_2_km: '',
  def_2_piket: '',
  // Техника
  tehnic_1: {
    type: '',
    model: '',
    icon: ''
  },
  tehnic_2: {
    type: '',
    model: '',
    icon: ''
  },
  tehnic_3: {
    type: '',
    model: '',
    icon: ''
  },
  uch_trub: 123
}];
var trumpId = document.querySelector('.trump-id').innerHTML,
    //Получаем slug участка на котрой перешли
addFormOverlay = document.querySelector('.sheme__map-overlay'),
    // Елеиент формы загрузки файла ВТД
sliderRow = document.querySelector('.slider__row'),
    // Контейнер для слайдов
searchTrumpInput = document.querySelector('.search-trump'),
    // Инпут для поиска трубы 
searchBtn = document.querySelector('[data-search]'),
    // Кнопка для поиска трубы 
nextSlideBtn = document.querySelector('.trump-nav__next'),
    prevSlideBtn = document.querySelector('.trump-nav__prev'); // Рендер трубы со всеми элементами

var Trump = /*#__PURE__*/function () {
  function Trump(number, status, peremichka_up, peremichka_down, zaglushka_ug, zaglushka_sever, otvod, otvod_izgib, otvod_napravleniye, comment_1, comment_2, comment_3, def_1, def_1_type_rem, def_1_percent, def_1_km, def_1_piket, def_2, def_2_type_rem, def_2_percent, def_2_km, def_2_piket, def_3, def_3_type_rem, def_3_percent, def_3_km, def_3_piket, tehnic_1, tehnic_2, tehnic_3, sliderItem) {
    _classCallCheck(this, Trump);

    this.number = number;
    this.status = status;
    this.peremichka_up = peremichka_up;
    this.peremichka_down = peremichka_down;
    this.zaglushka_ug = zaglushka_ug;
    this.zaglushka_sever = zaglushka_sever;
    this.otvod = otvod;
    this.otvod_izgib = otvod_izgib;
    this.otvod_napravleniye = otvod_napravleniye;
    this.comment_1 = comment_1;
    this.comment_2 = comment_2;
    this.comment_3 = comment_3;
    this.def_1 = def_1;
    this.def_1_type_rem = def_1_type_rem;
    this.def_1_percent = def_1_percent;
    this.def_1_km = def_1_km;
    this.def_1_piket = def_1_piket;
    this.def_2 = def_2;
    this.def_2_type_rem = def_2_type_rem;
    this.def_2_percent = def_2_percent;
    this.def_2_km = def_2_km;
    this.def_2_piket = def_2_piket;
    this.def_3 = def_3;
    this.def_3_type_rem = def_3_type_rem;
    this.def_3_percent = def_3_percent;
    this.def_3_km = def_3_km;
    this.def_3_piket = def_3_piket;
    this.tehnic_1 = tehnic_1;
    this.tehnic_2 = tehnic_2;
    this.tehnic_3 = tehnic_3;
    this.sliderItem = sliderItem;
  }

  _createClass(Trump, [{
    key: "render",
    value: function render() {
      var trumpElement = document.createElement('a');
      trumpElement.classList.add('trump-wrap', "stat".concat(this.status));
      trumpElement.innerHTML = "\n            <div class=\"trump\">\n                <!-- \u042E\u0436\u043D\u0430\u044F \u0437\u0430\u0433\u043B\u0443\u0448\u043A\u0430 -->\n                <div class=\"plug plug-ug\" data-trump-el=\"".concat(this.zaglushka_ug, "\"></div>\n\n                <!-- \u041F\u0435\u0440\u0435\u043C\u044B\u0447\u043A\u0430 \u0441\u0435\u0432\u0435\u0440/\u0432\u0435\u0440\u0445 -->\n                <div class=\"jumper jumper-top\" data-trump-el=\"").concat(this.peremichka_up, ">\n                    <div class=\"crane-wrap\">\n                        <div class=\"crane\">\n                            <div class=\"crane__left\"></div>\n                            <div class=\"crane__right\"></div>\n                        </div>\n                    </div>\n                    <div class=\"vertical stat1\"></div>\n                </div>\n\n                <!-- \u041F\u0435\u0440\u0435\u043C\u044B\u0447\u043A\u0430 \u043D\u0438\u0437 -->\n                <div class=\"jumper jumper-bottom\" data-trump-el=\"").concat(this.peremichka_down, ">\n                    <div class=\"vertical stat1\"></div>\n                    <div class=\"crane-wrap\">\n                        <div class=\"crane\">\n                            <div class=\"crane__left\"></div>\n                            <div class=\"crane__right\"></div>\n                        </div>\n                    </div>\n                </div>\n\n                <!-- \u041E\u0442\u0432\u043E\u0434\u044B -->\n                <div class=\"otvod\" data-trump-el=\"").concat(this.otvod, ">\n                    <div class=\"otvod__line\">\n                        <div class=\"line\">\n                            <div></div>\n                            <div></div>\n                        </div>\n                        <span class=\"deg\">").concat(this.otvod_izgib, "</span>\n                        <span class=\"nap\">").concat(this.otvod_napravleniye, "</span>\n                    </div>\n                </div>\n\n                <!-- \u0422\u0440\u0443\u0431\u0430 -->\n                <div class=\"horizontal\">\n\n                    <!-- \u0411\u043B\u043E\u043A \u0441 \u043A\u043E\u043C\u0435\u043D\u0442\u0430\u043C\u0438-\u0434\u0435\u0444\u0435\u043A\u0442\u0430\u043C\u0438 -->\n                    <div class=\"text-block\"></div>\n\n                    <!-- \u041D\u043E\u043C\u0435\u0440 \u0442\u0440\u0443\u0431\u044B -->\n                    <span class=\"number\">").concat(this.number, "</span>\n\n                    <!-- \u0411\u043B\u043E\u043A \u0441 \u0442\u0435\u0445\u043D\u0438\u043A\u043E\u0439 -->\n                    <div class=\"tehnic-block\"></div>\n\n                </div>\n\n                <!-- \u0421\u0435\u0432\u0435\u0440\u043D\u0430\u044F \u0437\u0430\u0433\u043B\u0443\u0448\u043A\u0430 -->\n                <div class=\"plug plug-sever\" data-trump-el=\"").concat(this.zaglushka_sever, "\"></div>\n            </div>\n        ");
      this.sliderItem.append(trumpElement);
    }
  }]);

  return Trump;
}();

var trumpIdUch; // Id участка в трубе полученный из базы

var searchTrumpInputVal = ''; // Значение инпута для поиска

function getTrumpsOrForm() {
  // getResource("getTruba/")
  //     .then(data => {
  testArr.forEach(function (obj) {
    if (obj.uch_trub === +trumpId) {
      trumpIdUch = obj.uch_trub;
    }
  }); // Если нет труб принадлежащих ремонтируемому участку, тогда выводим кнопку, иначе вызываем функцию разбивки всех труб, на массивы по 15 шт

  if (trumpIdUch != trumpId) {
    sliderRow.innerHTML = '';
    addFormOverlay.classList.remove('hide');
  } else {
    addFormOverlay.classList.add('hide');
    sliderRow.innerHTML = '';
    createSubArray(testArr, searchTrumpInputVal);
  } // })

}

getTrumpsOrForm(); // Функция дробления масива с трубами на подмасивы

function createSubArray(array) {
  var size = 15,
      //размер подмассива
  cloneArray = [],
      // Масив в котором будут храниться трубы принадлежащие к участку
  subarray = []; //массив в который будет выведен результат.
  // Записываем в новый массив только те объекты, которые относятся к даному участку

  array.forEach(function (obj) {
    if (trumpIdUch === obj.uch_trub) {
      cloneArray.push(obj);
    }
  }); // Дробим массив на массивы длиной в 15 Записей

  for (var i = 0; i < Math.ceil(cloneArray.length / size); i++) {
    subarray[i] = cloneArray.slice(i * size, i * size + size);
  } // Рендер участка


  var slideIndex = 0; // Функция рендеринга труб

  function renderTrumps() {
    sliderRow.innerHTML = '';
    var sliderItem = document.createElement('div');
    sliderItem.classList.add('slider__item', 'active-slide');
    trumpsRender(subarray[slideIndex], sliderItem);
    sliderRow.append(sliderItem);
    var sliderItemWidth = document.querySelector('.slider__item').clientWidth;
    sliderItem.style.width = "".concat(sliderItemWidth, "px"); // Показываем или скрываем заглушки, перемычки и т.д

    sliderItem.querySelectorAll('.trump-wrap').forEach(function (trump) {
      // Показываем или скрываем заглушки, перемычки
      var dataAtrs = trump.querySelectorAll('[data-trump-el]');
      dataAtrs.forEach(function (dataAtr) {
        if (dataAtr.getAttribute('data-trump-el') == 'false') {
          dataAtr.classList.add('hide');
        } else {
          dataAtr.classList.remove('hide');
        }
      }); // Показываем или  скрываем дефекты

      var defects = trump.querySelectorAll('.defect-name');
      defects.forEach(function (defect) {
        if (defect.innerHTML === '') {
          defect.parentElement.parentElement.classList.add('hide');
        } else {
          defect.parentElement.parentElement.classList.remove('hide');
        }
      }); // Показываем или  скрываем дефекты

      var tehnics = trump.querySelectorAll('.tehnic-type');
      tehnics.forEach(function (tehnic) {
        if (tehnic.innerHTML === '') {
          tehnic.parentElement.classList.add('hide');
        } else {
          tehnic.parentElement.classList.remove('hide');
        }
      });
    });
  } // Рендерим первые 15 труб


  renderTrumps(); // Рендер по поиску

  searchBtn.addEventListener('click', function (e) {
    searchTrumpInputVal = searchTrumpInput.value;

    if (searchTrumpInputVal != '') {
      subarray.forEach(function (arr, index) {
        arr.forEach(function (obj) {
          if (searchTrumpInputVal == obj.number) {
            slideIndex = index;
            renderTrumps();
            document.querySelectorAll('.trump-wrap .horizontal .number').forEach(function (trump) {
              if (trump.innerHTML === searchTrumpInputVal) {
                trump.parentElement.classList.add('horizontal_pulse');
              }
            });
          }
        });
      });
    }

    if (searchTrumpInputVal != '') {
      (function () {
        var arrNumbTrump = [];

        for (var _i = 0; _i < subarray.length;) {
          subarray[_i].forEach(function (obj) {
            arrNumbTrump.push(obj.number);
          });

          _i++;
        } // Ищем совпадения в масиве arrNumbTrump


        if (arrNumbTrump.includes(searchTrumpInputVal)) {
          document.querySelector('.search-trump-err').innerHTML = '';
          searchTrumpInput.style.borderColor = '';
        } else {
          searchTrumpInput.style.borderColor = 'red';
          document.querySelector('.search-trump-err').innerText = "\u0422\u0440\u0443\u0431\u0430 \u2116".concat(searchTrumpInputVal, " \u043E\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0432 \u0431\u0430\u0437\u0435");
        }
      })();
    } else {
      searchTrumpInput.style.borderColor = 'red';
      document.querySelector('.search-trump-err').innerText = "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435";
    }
  }); // SLIDER
  // Удалаяем кнопки слайдера если длина массива со слайдами равна 1

  if (subarray.length === 1) {
    removeBtn();
  } // Навигация по слайдам


  nextSlideBtn.addEventListener('click', function (e) {
    e.preventDefault();

    if (slideIndex < subarray.length - 1) {
      slideIndex++;
      renderTrumps();
    }
  });
  prevSlideBtn.addEventListener('click', function (e) {
    e.preventDefault();

    if (slideIndex = subarray.length - 1) {
      slideIndex--;
      renderTrumps();
    }
  });
} // Функция получения ресурсов


var getResource = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(url) {
    var res;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return fetch(url);

          case 2:
            res = _context.sent;

            if (res.ok) {
              _context.next = 5;
              break;
            }

            throw new Error("\u041E\u0448\u0438\u0431\u043A\u0430 \u0437\u0430\u043F\u0440\u043E\u0441\u0430 ".concat(url, ", \u0421\u0442\u0430\u0442\u0443\u0441: ").concat(res.status));

          case 5:
            _context.next = 7;
            return res.json();

          case 7:
            return _context.abrupt("return", _context.sent);

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getResource(_x) {
    return _ref.apply(this, arguments);
  };
}(); // Функция перебора труб и их рендеринга


function trumpsRender(trumsArray, sliderItem) {
  trumsArray.forEach(function (obj) {
    var trumpElement = document.createElement('a');
    trumpElement.classList.add('trump-wrap', "stat".concat(obj.status));
    trumpElement.innerHTML = "\n        <div class=\"trump\">\n            <!-- \u042E\u0436\u043D\u0430\u044F \u0437\u0430\u0433\u043B\u0443\u0448\u043A\u0430 -->\n            <div class=\"plug plug-ug\" data-trump-el=\"".concat(obj.zaglushka_ug, "\"></div>\n\n            <!-- \u041F\u0435\u0440\u0435\u043C\u044B\u0447\u043A\u0430 \u0441\u0435\u0432\u0435\u0440/\u0432\u0435\u0440\u0445 -->\n            <div class=\"jumper jumper-top\" data-trump-el=\"").concat(obj.peremichka_up, "\">\n                <div class=\"crane-wrap\">\n                    <div class=\"crane\">\n                        <div class=\"crane__left\"></div>\n                        <div class=\"crane__right\"></div>\n                    </div>\n                </div>\n                <div class=\"vertical stat1\"></div>\n            </div>\n\n            <!-- \u041F\u0435\u0440\u0435\u043C\u044B\u0447\u043A\u0430 \u043D\u0438\u0437 -->\n            <div class=\"jumper jumper-bottom\" data-trump-el=\"").concat(obj.peremichka_down, "\">\n                <div class=\"vertical stat1\"></div>\n                <div class=\"crane-wrap\">\n                    <div class=\"crane\">\n                        <div class=\"crane__left\"></div>\n                        <div class=\"crane__right\"></div>\n                    </div>\n                </div>\n            </div>\n\n            <!-- \u041E\u0442\u0432\u043E\u0434\u044B -->\n            <div class=\"otvod\">\n                <div class=\"otvod__line\" data-trump-el=\"").concat(obj.otvod, "\">\n                    <div class=\"line\">\n                        <div></div>\n                        <div></div>\n                    </div>\n                    <span class=\"deg\">").concat(obj.otvod_izgib, "</span>\n                    <span class=\"nap\">").concat(obj.otvod_napravleniye, "</span>\n                </div>\n            </div>\n\n            <!-- \u0422\u0440\u0443\u0431\u0430 -->\n            <div class=\"horizontal\">\n\n                <!-- \u0411\u043B\u043E\u043A \u0441 \u043A\u043E\u043C\u0435\u043D\u0442\u0430\u043C\u0438-\u0434\u0435\u0444\u0435\u043A\u0442\u0430\u043C\u0438 -->\n                <div class=\"text-block\">\n                    <!-- \u0411\u043B\u043E\u043A \u0441 \u043A\u043E\u043C\u0435\u043D\u0442\u0430\u043C\u0438 \u0432 \u0446\u0438\u043A\u043B\u0435-->\n                    <div class=\"text-item comment hide\">\n                        <span>\u0420\u0430\u0431\u043E\u0442\u0430 \u041F\u0418\u041B</span>\n                    </div>\n\n                    <!-- \u0411\u043B\u043E\u043A \u0441 \u0434\u0435\u0444\u0435\u043A\u0442\u0430\u043C\u0438 \u0432 \u0446\u0438\u043A\u043B\u0435-->\n                    <div class=\"text-item defect\">\n                        <span class=\"desc\">\n                            <span class=\"defect-name\">").concat(obj.def_1, "</span>\n                            <span class=\"defect-val\">").concat(obj.def_1_percent, " %</span>\n                            <small class=\"defect-km\">").concat(obj.def_1_km, " \u043A\u043C</small>\n                        </span>\n                    </div>\n                    <div class=\"text-item defect\">\n                        <span class=\"desc\">\n                            <span class=\"defect-name\">").concat(obj.def_2, "</span>\n                            <span class=\"defect-val\">").concat(obj.def_2_percent, " %</span>\n                            <small class=\"defect-km\">").concat(obj.def_2_km, " \u043A\u043C</small>\n                        </span>\n                    </div>\n                </div>\n\n                <!-- \u041D\u043E\u043C\u0435\u0440 \u0442\u0440\u0443\u0431\u044B -->\n                <span class=\"number\">").concat(obj.number, "</span>\n\n                <!-- \u0411\u043B\u043E\u043A \u0441 \u0442\u0435\u0445\u043D\u0438\u043A\u043E\u0439 -->\n                <div class=\"tehnic-block\">\n                    <!-- \u0411\u043B\u043E\u043A \u0441 \u0442\u0435\u0445\u043D\u0438\u043A\u043E\u0439 \u0432 \u0446\u0438\u043A\u043B\u0435-->\n                    <div class=\"text-item tehnic\">\n                        <img src=\"images/dist/tehnic/").concat(obj.tehnic_1.icon, "\" alt=\"").concat(obj.tehnic_1.icon, "\" class=\"icon\">\n                        <span class=\"tehnic-type\">").concat(obj.tehnic_1.type, "</span>\n                    </div>\n                    <div class=\"text-item tehnic\">\n                        <img src=\"images/dist/tehnic/").concat(obj.tehnic_2.icon, "\" alt=\"").concat(obj.tehnic_2.icon, "\" class=\"icon\">\n                        <span class=\"tehnic-type\">").concat(obj.tehnic_2.type, "</span>\n                    </div>\n                    <div class=\"text-item tehnic\">\n                        <img src=\"images/dist/tehnic/").concat(obj.tehnic_3.icon, "\" alt=\"").concat(obj.tehnic_3.icon, "\" class=\"icon\">\n                        <span class=\"tehnic-type\">").concat(obj.tehnic_3.type, "</span>\n                    </div>\n                </div>\n\n            </div>\n\n            <!-- \u0421\u0435\u0432\u0435\u0440\u043D\u0430\u044F \u0437\u0430\u0433\u043B\u0443\u0448\u043A\u0430 -->\n            <div class=\"plug plug-sever\" data-trump-el=\"").concat(obj.zaglushka_sever, "\"></div>\n        </div>\n        ");
    sliderItem.append(trumpElement);
  });
} // Функция удаления кнопок слайдера


function removeBtn() {
  nextSlideBtn.classList.add('hide');
  prevSlideBtn.classList.add('hide');
}

/***/ })
/******/ ]);